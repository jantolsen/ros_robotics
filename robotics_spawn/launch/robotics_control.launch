<?xml version="1.0"?>
<launch>
    
    <!-- ############################## -->
    <!--        Configuration           -->
    <!-- ############################## -->

        <!-- General Settings -->
        <arg name="sim"             default="true"/>
        <arg name="multi_robot"     default="true"/>
        
        <!-- Robot Settings -->
            <!-- YASKAWA GP400 -->
            <arg name="robot_1_simulation"          default="$(arg sim)"/>  
            <arg name="robot_1_ip"                  default="192.168.1.10" unless="$(arg robot_1_simulation)"/>
            <arg name="robot_1_type"                default="gp400"/>
            <arg name="robot_1_path"                default="motoman_gp400_support"/>
            <arg name="robot_1_namespace"           default="robot_A"/>
            <arg name="robot_1_parallel_linkage"    default="true"/>

            <!-- ABB IRB6660 -->
            <arg name="robot_2_simulation"          default="$(arg sim)"/>   
            <arg name="robot_2_ip"                  default="192.168.1.20" unless="$(arg robot_2_simulation)"/>
            <arg name="robot_2_type"                default="irb6660"/>
            <arg name="robot_2_path"                default="abb_irb6660_support"/>
            <arg name="robot_2_namespace"           default="robot_B"/>
            <arg name="robot_2_parallel_linkage"    default="true"/>
        
        <!-- Global Parameters -->
        <arg name="robot_description"                   value="robot_description"/>     <!-- The parameter-name under which the URDF is loaded -->
        <arg name="controller_manager"                  value="simple"/>                <!-- MoveIt Controller Manager (simple, ros_control, ros_multi_control)-->
        <arg name="planning_pipeline"                   value="ompl"/>                  <!-- Select Planning Pipeline (CHOMP, OMPL) -->
        <arg name="publish_monitored_planning_scene"    value="true"/>                  <!-- MoveIt Planning Execution Argument -->
        <arg name="allow_trajectory_execution"          value="true"/>
        <arg name="fake_execution"                      value="false"/>                 <!-- Fake execution controllers -->
        <arg name="execution_type"                      value="interpolate" />          <!-- Set execution mode for fake execution controllers -->

        <!-- RVIZ Config -->
        <arg name="joint_gui"       default="false" />   
        <arg name="rviz_config"     default="$(find robotics_spawn)/config/rviz_settings.rviz" />

        <!-- Web Socket Parameters -->
        <arg name="port"    default="9090"/>
        <arg name="address" default="0.0.0.0"/>

        <!-- Debug Parameters -->
        <arg name="debug"           default="false"/>
        <arg unless="$(arg debug)"  name="debug_config" value="" />
        <arg if=    "$(arg debug)"  name="debug_config" value="xterm -e gdb --ex run --args" />


    <!-- ############################## -->
    <!--    Parameter Loading Section   -->
    <!-- ############################## -->
        
        <!-- System Settings -->
        <!-- (Load gloab settings and parameters of system to parameter server) -->
        <rosparam command="load" file="$(find robotics_spawn)/config/system_settings.yaml" />

        <!-- Planning Context -->
        <!-- (Loading of URDF, SRDF, and Robot Prefix Parameters) -->
        <include file="$(find robotics_support)/launch/planning_context.launch" >
            <arg name="multi_robot"             value="$(arg multi_robot)"/>
            <arg name="robot_1_prefix"          value="$(arg robot_1_namespace)"/>
            <arg name="robot_1_type"            value="$(arg robot_1_type)" />
            <arg name="robot_1_support_path"    value="$(arg robot_1_path)" />
            <arg name="robot_2_prefix"          value="$(arg robot_2_namespace)"/>
            <arg name="robot_2_type"            value="$(arg robot_2_type)" />
            <arg name="robot_2_support_path"    value="$(arg robot_2_path)" />
            <arg name="robot_description"       value="$(arg robot_description)" />
        </include>

    
    <!-- ############################## -->
    <!--        Robot #1 - GP400        -->
    <!-- ############################## -->

        <!-- Robot #1 - Node Group -->
        <group ns="$(arg robot_1_namespace)">

            <!-- Simulated Robot -->
            <group if="$(arg robot_1_simulation)">
                <!-- Remapping of Joint-State and -Info -->
                <remap from="joint_states"  to="controller_joint_states"/>
                <remap from="joint_info"    to="controller_joint_info"/>
                
                <!-- Run the Robot Simulation and Action Interface Nodes -->
                <include file="$(find industrial_robot_simulator)/launch/robot_interface_simulator.launch" />
            </group>

            <!-- Real/Physical Robot -->
            <group unless="$(arg robot_1_simulation)">
                <!-- Remapping of Joint-State and -Info -->
                <remap from="$(arg robot_1_namespace)/$(arg robot_1_type)_controller/joint_states" to="controller_joint_states"/>
                <remap from="$(arg robot_1_namespace)/$(arg robot_1_type)_controller/feedback_states" to="feedback_states"/>
                
                <!-- Find the related launch file to route to the correct Robot-Controller-Driver -->
                <include file="$(find robotics_support)/launch/robot_controller_driver/$(arg robot_1_type)_driver.launch">
                    <arg name="robot_ip"            value="$(arg robot_1_ip)" />
                    <arg name="parallel_linkage"    value="$(arg robot_1_parallel_linkage)" />
                </include>
            </group>
        </group>
        <!-- Robot #1 - Node Group --> 


    <!-- ############################## -->
    <!--        Robot #2 - IRB6660      -->
    <!-- ############################## -->

        <!-- Robot #2 - Node Group -->
        <group ns="$(arg robot_2_namespace)">

            <!-- Simulated Robot -->
            <group if="$(arg robot_2_simulation)">
                <!-- Remapping of Joint-State and -Info -->
                <remap from="joint_states"  to="controller_joint_states"/>
                <remap from="joint_info"    to="controller_joint_info"/>

                <!-- Run the Robot Simulation and Action Interface Nodes -->
                <include file="$(find industrial_robot_simulator)/launch/robot_interface_simulator.launch" />
            </group>

            <!-- Real/Physical Robot -->
            <group unless="$(arg robot_2_simulation)">

                <!-- Find the related launch file to route to the correct Robot-Controller-Driver -->
                <include file="$(find robotics_support)/launch/robot_controller_driver/$(arg robot_2_type)_driver.launch">
                    <arg name="robot_ip"            value="$(arg robot_2_ip)" />
                    <arg name="parallel_linkage"    value="$(arg robot_2_parallel_linkage)" />
                </include>
            </group>
        </group>
        <!-- Robot #2 - Node Group --> 


    <!-- ############################## -->
    <!--        Move-It & RVIZ          -->
    <!-- ############################## -->

        <!-- Publish Joint-States -->
        <!-- <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" unless="$(arg joint_gui)">
            <rosparam param="source_list" > [robot_1/controller_joint_states, 
                                             robot_2/controller_joint_states] </rosparam>
        </node> -->

        <!-- Publish Joint-States -->
        <node name="joint_state_pub" pkg="robotics_support" type="joint_state_publisher_node"/>

        <!-- Publish the Robot State (TF transforms) -->
        <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"/>

        <!-- Move Group -->
        <include file="$(find robotics_support)/launch/move_group.launch">
            <arg name="controller_manager"                  value="$(arg controller_manager)"/>
            <arg name="debug"                               value="$(arg debug)"/>
            <arg name="pipeline"                            value="$(arg planning_pipeline)" />
            <arg name="publish_monitored_planning_scene"    value="$(arg publish_monitored_planning_scene)" />
            <arg name="allow_trajectory_execution"          value="$(arg allow_trajectory_execution)"/>
            <arg name="fake_execution"                      value="$(arg fake_execution)"/>
            <arg name="execution_type"                      value="$(arg execution_type)"/>
        </include>

        <!-- Rviz -->
        <include file="$(find robotics_support)/launch/moveit_rviz.launch">
            <arg name="launch_prefix"   value="$(arg debug_config)"/>
            <arg name="rviz_config"     value="-d $(arg rviz_config)" />
        </include>

        <!-- Web Video Server -->
        <include file="$(find robotics_spawn)/launch/camera_stream.launch">
            <arg name="port"                value="$(arg port)"/>
            <arg name="address"             value="$(arg address)"/>
            <arg name="global_ref_frame"    value="world"/>
            <arg name="eef_frame"           value="robot_A_eef_mount"/>
        </include>
</launch>